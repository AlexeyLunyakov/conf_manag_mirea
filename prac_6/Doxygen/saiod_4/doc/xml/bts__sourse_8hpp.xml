<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="ru">
  <compounddef id="bts__sourse_8hpp" kind="file" language="C++">
    <compoundname>bts_sourse.hpp</compoundname>
    <includes refid="bts__head_8h" local="yes">bts_head.h</includes>
    <includedby refid="saiod__4_8cpp" local="yes">C:/Users/AlexLnv/source/repos/siaod_4/saiod_4/saiod_4.cpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>bts_head.h</label>
        <link refid="bts__head_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>C:/Users/AlexLnv/source/repos/siaod_4/saiod_4/bts_sourse.hpp</label>
        <link refid="bts__sourse_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Windows.h</label>
      </node>
      <node id="6">
        <label>cmath</label>
      </node>
      <node id="5">
        <label>conio.h</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>C:/Users/AlexLnv/source/repos/siaod_4/saiod_4/bts_sourse.hpp</label>
        <link refid="bts__sourse_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>C:/Users/AlexLnv/source/repos/siaod_4/saiod_4/saiod_4.cpp</label>
        <link refid="saiod__4_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="bts__sourse_8hpp_1a3042233048ecf144d3b451c7b494ac89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void buildBinTree</definition>
        <argsstring>(int val, BinTree **new_tree)</argsstring>
        <name>buildBinTree</name>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="struct_bin_tree" kindref="compound">BinTree</ref> **</type>
          <declname>new_tree</declname>
        </param>
        <briefdescription>
<para>BTS construction function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Incoming parameter of new tree element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_tree</parametername>
</parameternamelist>
<parameterdescription>
<para>Incoming parameter of new tree branch</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Used<sp/>in<sp/>the<sp/>main<sp/>function<sp/>in<sp/>case:</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>buildBinTree(val,<sp/>&amp;Tree);</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/AlexLnv/source/repos/siaod_4/saiod_4/bts_sourse.hpp" line="25" column="6" bodyfile="C:/Users/AlexLnv/source/repos/siaod_4/saiod_4/bts_sourse.hpp" bodystart="25" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="bts__sourse_8hpp_1af9ba7783d3fba7bab387f7886a7d81d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_BT</definition>
        <argsstring>(BinTree **Tree, int l)</argsstring>
        <name>print_BT</name>
        <param>
          <type><ref refid="struct_bin_tree" kindref="compound">BinTree</ref> **</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>BTS printing function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Tree</parametername>
</parameternamelist>
<parameterdescription>
<para>Incoming parameter of new tree branch </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Incoming parameter of the level of element on tree</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Used<sp/>in<sp/>the<sp/>main<sp/>function<sp/>in<sp/>case:</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">print_BT(&amp;Tree,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/AlexLnv/source/repos/siaod_4/saiod_4/bts_sourse.hpp" line="56" column="6" bodyfile="C:/Users/AlexLnv/source/repos/siaod_4/saiod_4/bts_sourse.hpp" bodystart="56" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="bts__sourse_8hpp_1abd9773ca3a3fbd276000a6041aeb6307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main_summ</definition>
        <argsstring>(int tmp_sum)</argsstring>
        <name>main_summ</name>
        <param>
          <type>int</type>
          <declname>tmp_sum</declname>
        </param>
        <briefdescription>
<para>Auxiliary variable storage function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmp_sum</parametername>
</parameternamelist>
<parameterdescription>
<para>Incoming parameter of saved amount</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Used<sp/>in<sp/>ReverseBypass_count<sp/>function</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">summa<sp/>=<sp/>main_summ(summa+a);</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/AlexLnv/source/repos/siaod_4/saiod_4/bts_sourse.hpp" line="82" column="5" bodyfile="C:/Users/AlexLnv/source/repos/siaod_4/saiod_4/bts_sourse.hpp" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="bts__sourse_8hpp_1aad9b03133e03d17935569dbd667c8fba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ReverseBypass_count</definition>
        <argsstring>(BinTree *Tree, int &amp;summa)</argsstring>
        <name>ReverseBypass_count</name>
        <param>
          <type><ref refid="struct_bin_tree" kindref="compound">BinTree</ref> *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>summa</declname>
        </param>
        <briefdescription>
<para>Function to calculate the sum of values in leaves using reverse tree traversal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Tree</parametername>
</parameternamelist>
<parameterdescription>
<para>Incoming parameter of new tree branch </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>summa</parametername>
</parameternamelist>
<parameterdescription>
<para>Incoming parameter of the calculated amount</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Used<sp/>in<sp/>the<sp/>main<sp/>function<sp/>in<sp/>case:</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">int<sp/>summa<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">cout<sp/>&lt;&lt;<sp/>ReverseBypass_count(Tree,<sp/>summa);</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/AlexLnv/source/repos/siaod_4/saiod_4/bts_sourse.hpp" line="101" column="5" bodyfile="C:/Users/AlexLnv/source/repos/siaod_4/saiod_4/bts_sourse.hpp" bodystart="101" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="bts__sourse_8hpp_1ae452dc0ed5ba24ddfd4a9aac2c4b769e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Leaf_count</definition>
        <argsstring>(BinTree *Tree)</argsstring>
        <name>Leaf_count</name>
        <param>
          <type><ref refid="struct_bin_tree" kindref="compound">BinTree</ref> *</type>
          <declname>Tree</declname>
        </param>
        <briefdescription>
<para>Function to calculate the number of leaves in a tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Tree</parametername>
</parameternamelist>
<parameterdescription>
<para>Incoming parameter of new tree branch</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Used<sp/>in<sp/>the<sp/>main<sp/>function<sp/>in<sp/>case:</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">int<sp/>b<sp/>=<sp/>Leaf_count(Tree);</highlight></codeline>
<codeline><highlight class="normal">cout<sp/>&lt;&lt;<sp/>b<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/AlexLnv/source/repos/siaod_4/saiod_4/bts_sourse.hpp" line="125" column="5" bodyfile="C:/Users/AlexLnv/source/repos/siaod_4/saiod_4/bts_sourse.hpp" bodystart="125" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="bts__sourse_8hpp_1a80ca44fc17c9eaf0739339c542dea2b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Node_count</definition>
        <argsstring>(BinTree *Tree)</argsstring>
        <name>Node_count</name>
        <param>
          <type><ref refid="struct_bin_tree" kindref="compound">BinTree</ref> *</type>
          <declname>Tree</declname>
        </param>
        <briefdescription>
<para>Function to calculate the number of nodes in a tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Tree</parametername>
</parameternamelist>
<parameterdescription>
<para>Incoming parameter of new tree branch</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Used<sp/>in<sp/>the<sp/>main<sp/>function<sp/>in<sp/>case:</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a<sp/>=<sp/>Node_count(Tree);</highlight></codeline>
<codeline><highlight class="normal">cout<sp/>&lt;&lt;<sp/>a<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/AlexLnv/source/repos/siaod_4/saiod_4/bts_sourse.hpp" line="146" column="5" bodyfile="C:/Users/AlexLnv/source/repos/siaod_4/saiod_4/bts_sourse.hpp" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="bts__sourse_8hpp_1a1bd9943061673b5b3fab696eeb530119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_bin_tree" kindref="compound">BinTree</ref> *</type>
        <definition>BinTree * MaxValue</definition>
        <argsstring>(BinTree *Tree)</argsstring>
        <name>MaxValue</name>
        <param>
          <type><ref refid="struct_bin_tree" kindref="compound">BinTree</ref> *</type>
          <declname>Tree</declname>
        </param>
        <briefdescription>
<para>Function for finding the maximum element of BTS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Tree</parametername>
</parameternamelist>
<parameterdescription>
<para>Incoming parameter of new tree branch</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Used<sp/>in<sp/>the<sp/>main<sp/>function<sp/>in<sp/>case:</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">BinTree*<sp/>max<sp/>=<sp/>MaxValue(Tree);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>key<sp/>=<sp/>max-&gt;value;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/AlexLnv/source/repos/siaod_4/saiod_4/bts_sourse.hpp" line="165" column="9" bodyfile="C:/Users/AlexLnv/source/repos/siaod_4/saiod_4/bts_sourse.hpp" bodystart="165" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="bts__sourse_8hpp_1a604bd83200a602624c8dbcab70a67862" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MaxValue_del</definition>
        <argsstring>(BinTree *Tree, int key)</argsstring>
        <name>MaxValue_del</name>
        <param>
          <type><ref refid="struct_bin_tree" kindref="compound">BinTree</ref> *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type>int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Function to remove the maximum element of BTS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Tree</parametername>
</parameternamelist>
<parameterdescription>
<para>Incoming parameter of new tree branch </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Incoming parameter of the value to be removed from the tree</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">Used<sp/>in<sp/>the<sp/>main<sp/>function<sp/>in<sp/>case:</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">MaxValue_del(Tree,<sp/>key);</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/AlexLnv/source/repos/siaod_4/saiod_4/bts_sourse.hpp" line="188" column="6" bodyfile="C:/Users/AlexLnv/source/repos/siaod_4/saiod_4/bts_sourse.hpp" bodystart="188" bodyend="195"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Source file describing the functions that can be used to interact with BTS. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bts__head_8h" kindref="compound">bts_head.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Rules<sp/>for<sp/>creating<sp/>BTS:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>all<sp/>nodes<sp/>of<sp/>the<sp/>node&apos;s<sp/>left<sp/>subtree<sp/>have<sp/>data<sp/>key<sp/>values<sp/>less<sp/>than<sp/>the<sp/>data<sp/>key<sp/>value<sp/>of<sp/>the<sp/>node<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>all<sp/>nodes<sp/>of<sp/>the<sp/>right<sp/>subtree<sp/>of<sp/>the<sp/>node,<sp/>the<sp/>values<sp/>of<sp/>the<sp/>data<sp/>keys<sp/>are<sp/>greater<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>the<sp/>value<sp/>of<sp/>the<sp/>data<sp/>key<sp/>of<sp/>the<sp/>node<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="bts__sourse_8hpp_1a3042233048ecf144d3b451c7b494ac89" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bts__sourse_8hpp_1a3042233048ecf144d3b451c7b494ac89" kindref="member">buildBinTree</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val,<sp/><ref refid="struct_bin_tree" kindref="compound">BinTree</ref>**<sp/>new_tree)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*new_tree)<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*new_tree)<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_bin_tree" kindref="compound">BinTree</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Putting<sp/>a<sp/>new<sp/>value<sp/>into<sp/>the<sp/>allocated<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*new_tree)-&gt;<ref refid="struct_bin_tree_1aec5735542d719d0a3693fb76d49daaa8" kindref="member">value</ref><sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>empty<sp/>branches<sp/>from<sp/>the<sp/>current<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*new_tree)-&gt;left<sp/>=<sp/>(*new_tree)-&gt;right<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;<sp/>(*new_tree)-&gt;value)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bts__sourse_8hpp_1a3042233048ecf144d3b451c7b494ac89" kindref="member">buildBinTree</ref>(val,<sp/>&amp;(*new_tree)-&gt;right);<sp/></highlight><highlight class="comment">//If<sp/>the<sp/>argument<sp/>is<sp/>greater<sp/>than<sp/>the<sp/>current<sp/>element,<sp/>push<sp/>it<sp/>to<sp/>the<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bts__sourse_8hpp_1a3042233048ecf144d3b451c7b494ac89" kindref="member">buildBinTree</ref>(val,<sp/>&amp;(*new_tree)-&gt;left);<sp/></highlight><highlight class="comment">//Else<sp/>put<sp/>it<sp/>to<sp/>the<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="bts__sourse_8hpp_1af9ba7783d3fba7bab387f7886a7d81d7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bts__sourse_8hpp_1af9ba7783d3fba7bab387f7886a7d81d7" kindref="member">print_BT</ref>(<ref refid="struct_bin_tree" kindref="compound">BinTree</ref>**<sp/>Tree,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*Tree<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calling<sp/>this<sp/>function<sp/>from<sp/>the<sp/>right<sp/>subtree<sp/>of<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bts__sourse_8hpp_1af9ba7783d3fba7bab387f7886a7d81d7" kindref="member">print_BT</ref>(&amp;((**Tree).right),<sp/>l<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Indentation<sp/>increases<sp/>depending<sp/>on<sp/>the<sp/>level<sp/>of<sp/>the<sp/>element<sp/>in<sp/>the<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>l;<sp/>i++)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>(**Tree).value<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calling<sp/>this<sp/>function<sp/>from<sp/>the<sp/>left<sp/>subtree<sp/>of<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bts__sourse_8hpp_1af9ba7783d3fba7bab387f7886a7d81d7" kindref="member">print_BT</ref>(&amp;((**Tree).left),<sp/>l<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="bts__sourse_8hpp_1abd9773ca3a3fbd276000a6041aeb6307" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bts__sourse_8hpp_1abd9773ca3a3fbd276000a6041aeb6307" kindref="member">main_summ</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmp_sum)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp_sum;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="bts__sourse_8hpp_1aad9b03133e03d17935569dbd667c8fba" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bts__sourse_8hpp_1aad9b03133e03d17935569dbd667c8fba" kindref="member">ReverseBypass_count</ref>(<ref refid="struct_bin_tree" kindref="compound">BinTree</ref>*<sp/>Tree,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>summa)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tree<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bts__sourse_8hpp_1aad9b03133e03d17935569dbd667c8fba" kindref="member">ReverseBypass_count</ref>(Tree-&gt;<ref refid="struct_bin_tree_1a2d58ebfa880daae7744565d0d8051c85" kindref="member">left</ref>,<sp/>summa);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bts__sourse_8hpp_1aad9b03133e03d17935569dbd667c8fba" kindref="member">ReverseBypass_count</ref>(Tree-&gt;<ref refid="struct_bin_tree_1a0e4176b4e20697275c7bad76155f0424" kindref="member">right</ref>,<sp/>summa);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>Tree-&gt;<ref refid="struct_bin_tree_1aec5735542d719d0a3693fb76d49daaa8" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>summa<sp/>=<sp/><ref refid="bts__sourse_8hpp_1abd9773ca3a3fbd276000a6041aeb6307" kindref="member">main_summ</ref>(summa+a);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>summa;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="bts__sourse_8hpp_1ae452dc0ed5ba24ddfd4a9aac2c4b769e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bts__sourse_8hpp_1ae452dc0ed5ba24ddfd4a9aac2c4b769e" kindref="member">Leaf_count</ref>(<ref refid="struct_bin_tree" kindref="compound">BinTree</ref>*<sp/>Tree)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Tree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Tree-&gt;<ref refid="struct_bin_tree_1a2d58ebfa880daae7744565d0d8051c85" kindref="member">left</ref><sp/>&amp;&amp;<sp/>!Tree-&gt;<ref refid="struct_bin_tree_1a0e4176b4e20697275c7bad76155f0424" kindref="member">right</ref>)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><ref refid="bts__sourse_8hpp_1ae452dc0ed5ba24ddfd4a9aac2c4b769e" kindref="member">Leaf_count</ref>(Tree-&gt;<ref refid="struct_bin_tree_1a2d58ebfa880daae7744565d0d8051c85" kindref="member">left</ref>)<sp/>+<sp/><ref refid="bts__sourse_8hpp_1ae452dc0ed5ba24ddfd4a9aac2c4b769e" kindref="member">Leaf_count</ref>(Tree-&gt;<ref refid="struct_bin_tree_1a0e4176b4e20697275c7bad76155f0424" kindref="member">right</ref>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="bts__sourse_8hpp_1a80ca44fc17c9eaf0739339c542dea2b5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bts__sourse_8hpp_1a80ca44fc17c9eaf0739339c542dea2b5" kindref="member">Node_count</ref>(<ref refid="struct_bin_tree" kindref="compound">BinTree</ref>*<sp/>Tree)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tree<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="bts__sourse_8hpp_1a80ca44fc17c9eaf0739339c542dea2b5" kindref="member">Node_count</ref>(Tree-&gt;<ref refid="struct_bin_tree_1a2d58ebfa880daae7744565d0d8051c85" kindref="member">left</ref>)<sp/>+<sp/>1<sp/>+<sp/><ref refid="bts__sourse_8hpp_1a80ca44fc17c9eaf0739339c542dea2b5" kindref="member">Node_count</ref>(Tree-&gt;<ref refid="struct_bin_tree_1a0e4176b4e20697275c7bad76155f0424" kindref="member">right</ref>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="bts__sourse_8hpp_1a1bd9943061673b5b3fab696eeb530119" refkind="member"><highlight class="normal"><ref refid="struct_bin_tree" kindref="compound">BinTree</ref>*<sp/><ref refid="bts__sourse_8hpp_1a1bd9943061673b5b3fab696eeb530119" kindref="member">MaxValue</ref>(<ref refid="struct_bin_tree" kindref="compound">BinTree</ref>*<sp/>Tree)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tree-&gt;<ref refid="struct_bin_tree_1a0e4176b4e20697275c7bad76155f0424" kindref="member">right</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><ref refid="bts__sourse_8hpp_1a1bd9943061673b5b3fab696eeb530119" kindref="member">MaxValue</ref>(Tree-&gt;<ref refid="struct_bin_tree_1a0e4176b4e20697275c7bad76155f0424" kindref="member">right</ref>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Tree;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="bts__sourse_8hpp_1a604bd83200a602624c8dbcab70a67862" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bts__sourse_8hpp_1a604bd83200a602624c8dbcab70a67862" kindref="member">MaxValue_del</ref>(<ref refid="struct_bin_tree" kindref="compound">BinTree</ref>*<sp/>Tree,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tree-&gt;<ref refid="struct_bin_tree_1a0e4176b4e20697275c7bad76155f0424" kindref="member">right</ref>-&gt;<ref refid="struct_bin_tree_1aec5735542d719d0a3693fb76d49daaa8" kindref="member">value</ref><sp/>!=<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bts__sourse_8hpp_1a604bd83200a602624c8dbcab70a67862" kindref="member">MaxValue_del</ref>(Tree-&gt;<ref refid="struct_bin_tree_1a0e4176b4e20697275c7bad76155f0424" kindref="member">right</ref>,<sp/>key);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tree-&gt;<ref refid="struct_bin_tree_1a0e4176b4e20697275c7bad76155f0424" kindref="member">right</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/AlexLnv/source/repos/siaod_4/saiod_4/bts_sourse.hpp"/>
  </compounddef>
</doxygen>
